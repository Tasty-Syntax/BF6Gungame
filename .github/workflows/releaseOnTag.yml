name: Release on tag

on:
  push:
    tags:
      - '*'           # Only run when a tag is pushed
  workflow_dispatch:  # Optional manual trigger

permissions:
  contents: write     # Needed to create releases

jobs:
  release:
    if: github.event.deleted != true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout full history (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine current and previous tag
        id: tags
        shell: bash
        run: |
          current="${{ github.ref_name }}"   # e.g. 0.0.3
          prev="$(git describe --tags --abbrev=0 "${current}^" 2>/dev/null || echo "")"
          echo "current=$current" >> "$GITHUB_OUTPUT"
          echo "previous=$prev"   >> "$GITHUB_OUTPUT"

      - name: Build grouped changelog with commit links (multiline)
        id: changelog
        shell: bash
        run: |
          set -euo pipefail
          current="${{ steps.tags.outputs.current }}"
          previous="${{ steps.tags.outputs.previous }}"

          # Determine commit range
          if [ -n "$previous" ]; then
            range="$previous..$current"
          else
            # First tag: include all history reachable by this tag
            root="$(git rev-list --max-parents=0 "$current")"
            range="${root}..${current}"
          fi

          repo_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"

          # Buckets
          changed=()
          added=()
          deleted=()
          other=()

          # Read commits safely (handles any characters)
          while IFS=$'\x1f' read -r hash subject || [ -n "$hash" ]; do
            [ -z "${hash:-}" ] && continue
            short="${hash:0:7}"
            line="- [${short}](${repo_url}/commit/${hash}) ${subject}"

            s_lc="$(printf '%s' "$subject" | tr '[:upper:]' '[:lower:]')"

            if [[ "$s_lc" == *"changed"* || "$s_lc" == *"update"* || "$s_lc" == *"updated"* ]]; then
              changed+=("$line")
            elif [[ "$s_lc" == adde*: || "$s_lc" == *"added"* ]]; then
              added+=("$line")
            elif [[ "$s_lc" == delet*: || "$s_lc" == *"deleted"* ]]; then
              deleted+=("$line")
            else
              other+=("$line")
            fi
          done < <(git log "$range" --pretty=format:'%H%x1f%s')

          body="Changelog:\n\n"

          # Emit in requested order: CHANGED, ADDED, DELETED
          if [ ${#changed[@]} -gt 0 ]; then
            body+="**CHANGED**\n"
            for i in "${changed[@]}"; do body+="$i\n"; done
            body+="\n"
          fi

          if [ ${#added[@]} -gt 0 ]; then
            body+="**ADDED**\n"
            for i in "${added[@]}"; do body+="$i\n"; done
            body+="\n"
          fi

          if [ ${#deleted[@]} -gt 0 ]; then
            body+="**DELETED**\n"
            for i in "${deleted[@]}"; do body+="$i\n"; done
            body+="\n"
          fi

          # Optionally include uncategorized commits if any
          if [ ${#other[@]} -gt 0 ]; then
            body+="**OTHER**\n"
            for i in "${other[@]}"; do body+="$i\n"; done
            body+="\n"
          fi

          if [ "${#changed[@]}${#added[@]}${#deleted[@]}${#other[@]}" = "0000" ]; then
            body+="(No changes found)\n"
          fi

          {
            echo "body<<'EOF'"
            printf "%s" "$body"
            echo
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tags.outputs.current }}
          name: Gungame v${{ steps.tags.outputs.current }}
          body: ${{ steps.changelog.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
