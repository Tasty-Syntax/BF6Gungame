name: Wiki changelog on tag

on:
  push:
    tags: ['*']
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to document (e.g., 0.0.3). If omitted, uses the pushed tag."
        required: false
        type: string

permissions:
  contents: write

jobs:
  wiki:
    if: github.event.deleted != true
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout full history (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve tag (push vs manual)
        id: res
        shell: bash
        run: |
          tag="${{ inputs.tag }}"
          if [ -z "$tag" ]; then tag="${{ github.ref_name }}"; fi
          git fetch --tags --force
          if ! git rev-parse -q --verify "refs/tags/${tag}" >/dev/null; then
            echo "Tag '${tag}' not found." >&2; exit 1
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Determine previous tag and human-friendly timestamp
        id: tags
        shell: bash
        run: |
          current="${{ steps.res.outputs.tag }}"
          prev="$(git describe --tags --abbrev=0 "${current}^" 2>/dev/null || echo "")"

          # Prefer annotated tag date; fallback to commit date
          tag_date_iso="$(git for-each-ref --format='%(taggerdate:iso8601)' "refs/tags/${current}")"
          if [ -z "$tag_date_iso" ]; then
            tag_date_iso="$(git log -1 --format=%cI "${current}")"
          fi

          # Human-friendly UTC (you can switch to Europe/Berlin if you prefer)
          tag_date_human="$(date -u -d "$tag_date_iso" '+%A, %d %B %Y at %H:%M UTC')"

          echo "current=$current"               >> "$GITHUB_OUTPUT"
          echo "previous=$prev"                 >> "$GITHUB_OUTPUT"
          echo "tag_date_iso=$tag_date_iso"     >> "$GITHUB_OUTPUT"
          echo "tag_date_human=$tag_date_human" >> "$GITHUB_OUTPUT"

      - name: Build grouped changelog (author + commit date) -> file
        id: changelog
        shell: bash
        run: |
          set -euo pipefail
          current="${{ steps.tags.outputs.current }}"
          previous="${{ steps.tags.outputs.previous }}"

          if [ -n "$previous" ]; then
            range="$previous..$current"
          else
            root="$(git rev-list --max-parents=0 "$current")"
            range="${root}..${current}"
          fi

          repo_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"

          changed=(); added=(); deleted=(); other=()

          # %H hash, %s subject, %an author, %aI author date (ISO)
          while IFS=$'\x1f' read -r h s an ad || [ -n "${h:-}" ]; do
            [ -z "${h:-}" ] && continue
            short="${h:0:7}"
            line="- [${short}](${repo_url}/commit/${h}) ${s} — _by ${an} on ${ad}_"
            slc="$(printf '%s' "$s" | tr '[:upper:]' '[:lower:]')"
            if   [[ "$slc" == *changed* || "$slc" == *update* || "$slc" == *updated* ]]; then changed+=("$line")
            elif [[ "$slc" == add*     || "$slc" == *added* ]]; then added+=("$line")
            elif [[ "$slc" == delet*   || "$slc" == *deleted* || "$slc" == *remove* || "$slc" == *removed* ]]; then deleted+=("$line")
            else other+=("$line"); fi
          done < <(git log "$range" --pretty=format:'%H%x1f%s%x1f%an%x1f%aI')

          out="CHANGELOG_${current}.md"
          {
            echo "# Changelog / v${current}"
            echo
            echo "_Tag created: **${{ steps.tags.outputs.tag_date_human }}**  (ISO: \`${{ steps.tags.outputs.tag_date_iso }}\`)_"
            echo
            echo "Changelog:"
            echo
            [ ${#changed[@]} -gt 0 ] && { echo "**CHANGED**"; printf '%s\n' "${changed[@]}"; echo; }
            [ ${#added[@]}   -gt 0 ] && { echo "**ADDED**";   printf '%s\n' "${added[@]}";   echo; }
            [ ${#deleted[@]} -gt 0 ] && { echo "**DELETED**"; printf '%s\n' "${deleted[@]}"; echo; }
            if [ $(( ${#changed[@]} + ${#added[@]} + ${#deleted[@]} )) -eq 0 ]; then
              [ ${#other[@]} -gt 0 ] && { printf '%s\n' "${other[@]}"; echo; } || echo "(No changes found)"
            fi
          } > "$out"

          echo "body_path=$out" >> "$GITHUB_OUTPUT"

      - name: Update GitHub Wiki (true nesting under Changelog + internal links)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          current="${{ steps.tags.outputs.current }}"
          outfile="${{ steps.changelog.outputs.body_path }}"
          idx_date="${{ steps.tags.outputs.tag_date_human }}"

          WIKI_URL="https://${GITHUB_ACTOR}:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.wiki.git"
          git clone --depth 1 "$WIKI_URL" wiki

          # Ensure folder & index page for the Changelog section
          mkdir -p "wiki/Changelog"

          # Folder index: Changelog/Home.md (this is the canonical parent page)
          folder_index="wiki/Changelog/Home.md"
          {
            echo "# Changelog"
            echo
            echo "This section lists all release notes by version."
            echo
            # Prepend the newest version at top; then render existing entries (if any)
            echo "- [[Changelog/${current}|v${current}]] — ${idx_date}"
            echo
            if [ -f "$folder_index" ]; then
              # Append previous lines from existing Home.md, skipping the header line
              tail -n +2 "$folder_index" | sed '/^\s*$/N;/^\n$/D' || true
            fi
          } > "wiki/_new_home.md"
          mv "wiki/_new_home.md" "$folder_index"

          # Also keep a minimal root Changelog.md that points to the folder index (optional, nice UX)
          root_index="wiki/Changelog.md"
          {
            echo "# Changelog"
            echo
            echo "See the full list at [[Changelog|Changelog (folder index)]]."
          } > "$root_index"

          # Version page under the Changelog folder
          cp "$outfile" "wiki/Changelog/${current}.md"

          # Remove any stray root-level version page so it doesn't appear loose
          if [ -f "wiki/${current}.md" ]; then
            git -C wiki rm -f "${current}.md" || rm -f "wiki/${current}.md" || true
          fi

          # Update _Sidebar to include a Changelog section and link to the folder index + latest one
          sidebar="wiki/_Sidebar.md"
          link_latest="* [[Changelog/${current}|v${current}]] — ${idx_date}"
          if [ -f "$sidebar" ]; then
            awk -v latest="$link_latest" '
              BEGIN{added_index=0; added_latest=0}
              tolower($0) ~ /^## changelog/ {
                print $0
                if (added_index==0){ print ""; print "* [[Changelog|Changelog index]]"; added_index=1 }
                if (added_latest==0){ print latest; added_latest=1 }
                next
              }
              # drop duplicate lines pointing to this version
              index($0, "Changelog/") && index($0, "] —") { next }
              { print }
              END{
                if (added_index==0 || added_latest==0){
                  print ""
                  print "## Changelog"
                  print ""
                  if (added_index==0)  print "* [[Changelog|Changelog index]]"
                  if (added_latest==0) print latest
                }
              }
            ' "$sidebar" > "wiki/_Sidebar.new.md"
          else
            {
              echo "## Changelog"
              echo
              echo "* [[Changelog|Changelog index]]"
              echo "$link_latest"
              echo
            } > "wiki/_Sidebar.new.md"
          fi
          mv "wiki/_Sidebar.new.md" "$sidebar"

          pushd wiki >/dev/null
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "Changelog/${current}.md" "Changelog/Home.md" "Changelog.md" "_Sidebar.md" || true
          git commit -m "Wiki: nest v${current} under Changelog (folder index + internal links)" || echo "No wiki changes to commit."
          git push
          popd >/dev/null
